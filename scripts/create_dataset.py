import zipfile
import os
import numpy as np
import cv2
import h5py

# Define paths
zip_path = "C:\\Users\\Dell\\Downloads\\tif-20240809T214236Z-002.zip"
extract_path = "C:\\Users\\Dell\\Documents\GitHub\\PtyLab.py\\extracted\\tif"
hdf5_file_path = 'C:\\Users\\Dell\\Documents\\GitHub\\PtyLab.py\\example_data\\stained_histology_1LED.hdf5'

# # Extract the zip file
# with zipfile.ZipFile(zip_path, 'r') as zip_ref:
#     zip_ref.extractall(extract_path)

# List of extracted files
image_files = [f for f in os.listdir(extract_path) if f.lower().endswith(('.png', '.jpg', '.tif'))]

# Check if there are images in the zip file
if not image_files:
    raise ValueError("No valid image files found in the zip file.")

# Load the first image to determine dimensions
first_image_path = os.path.join(extract_path, image_files[0])
first_image = cv2.imread(first_image_path, cv2.IMREAD_GRAYSCALE)
if first_image is None:
    raise ValueError(f"Unable to load image at {first_image_path}")

# Determine image dimensions
X, Y = first_image.shape
numFrames = len(image_files)

# pad each image 200 pixels on top and bottom
X += 400

# resize each image to 512x512
X = 512
Y = 512

# Prepare data
ptychogram = np.zeros((numFrames, X, Y), dtype=np.float64)

import numpy as np

# Given parameters
ds_led = 4e-3  # spacing between neighboring LEDs in micrometers
z_led = 67.5e-3  # distance from the LED to the object in micrometers
dia_led = 19  # diameter of # of LEDs used in the experiment
lit_cenv = 14  # LED array center vertical index
lit_cenh = 15  # LED array center horizontal index

# Generate the LED grid
vled = np.arange(0, 32) - lit_cenv
hled = np.arange(0, 32) - lit_cenh
hhled, vvled = np.meshgrid(hled, vled)

# Calculate the radius and apply the LED selection mask
rrled = np.sqrt(hhled**2 + vvled**2)
LitCoord = rrled < dia_led / 2

# Get the indices of LEDs used in the experiment
Litidx = np.where(LitCoord)

# Convert indices to positions (in micrometers)
led_positions = np.column_stack((hhled[Litidx] * ds_led, vvled[Litidx] * ds_led))

encoder = led_positions
print(encoder)

# reverse each element
reverse = lambda x: x[::-1]
inverse = lambda x: [x[0], x[1] * -1]
inverse2 = lambda x: [x[0]*-1, x[1]]

# encoder = np.array(list(map(reverse, encoder)))
# encoder = np.array(list(map(inverse, encoder)))
encoder = np.array(list(map(inverse2, encoder)))

# encoder = encoder[::-1]
print(encoder)

# [[-9 -3]
#  [-9 -2]
#  [-9 -1]
#  [-9  0]
#  [-9  1]
#  [-9  2]
#  [-9  3]
#  [-8 -5]
#  [-8 -4]
#  [-8 -3]
#  [-8 -2]
#  [-8 -1]
#  [-8  0]
#  [-8  1]
#  [-8  2]
#  [-8  3]
#  [-8  4]
#  [-8  5]
#  [-7 -6]
#  [-7 -5]
#  [-7 -4]
#  [-7 -3]
#  [-7 -2]
#  [-7 -1]
#  [-7  0]
#  [-7  1]
#  [-7  2]
#  [-7  3]
#  [-7  4]
#  [-7  5]
#  [-7  6]
#  [-6 -7]
#  [-6 -6]
#  [-6 -5]
#  [-6 -4]
#  [-6 -3]
#  [-6 -2]
#  [-6 -1]
#  [-6  0]
#  [-6  1]
#  [-6  2]
#  [-6  3]
#  [-6  4]
#  [-6  5]
#  [-6  6]
#  [-6  7]
#  [-5 -8]
#  [-5 -7]
#  [-5 -6]
#  [-5 -5]
#  [-5 -4]
#  [-5 -3]
#  [-5 -2]
#  [-5 -1]
#  [-5  0]
#  [-5  1]
#  [-5  2]
#  [-5  3]
#  [-5  4]
#  [-5  5]
#  [-5  6]
#  [-5  7]
#  [-5  8]
#  [-4 -8]
#  [-4 -7]
#  [-4 -6]
#  [-4 -5]
#  [-4 -4]
#  [-4 -3]
#  [-4 -2]
#  [-4 -1]
#  [-4  0]
#  [-4  1]
#  [-4  2]
#  [-4  3]
#  [-4  4]
#  [-4  5]
#  [-4  6]
#  [-4  7]
#  [-4  8]
#  [-3 -9]
#  [-3 -8]
#  [-3 -7]
#  [-3 -6]
#  [-3 -5]
#  [-3 -4]
#  [-3 -3]
#  [-3 -2]
#  [-3 -1]
#  [-3  0]
#  [-3  1]
#  [-3  2]
#  [-3  3]
#  [-3  4]
#  [-3  5]
#  [-3  6]
#  [-3  7]
#  [-3  8]
#  [-3  9]
#  [-2 -9]
#  [-2 -8]
#  [-2 -7]
#  [-2 -6]
#  [-2 -5]
#  [-2 -4]
#  [-2 -3]
#  [-2 -2]
#  [-2 -1]
#  [-2  0]
#  [-2  1]
#  [-2  2]
#  [-2  3]
#  [-2  4]
#  [-2  5]
#  [-2  6]
#  [-2  7]
#  [-2  8]
#  [-2  9]
#  [-1 -9]
#  [-1 -8]
#  [-1 -7]
#  [-1 -6]
#  [-1 -5]
#  [-1 -4]
#  [-1 -3]
#  [-1 -2]
#  [-1 -1]
#  [-1  0]
#  [-1  1]
#  [-1  2]
#  [-1  3]
#  [-1  4]
#  [-1  5]
#  [-1  6]
#  [-1  7]
#  [-1  8]
#  [-1  9]
#  [ 0 -9]
#  [ 0 -8]
#  [ 0 -7]
#  [ 0 -6]
#  [ 0 -5]
#  [ 0 -4]
#  [ 0 -3]
#  [ 0 -2]
#  [ 0 -1]
#  [ 0  0]
#  [ 0  1]
#  [ 0  2]
#  [ 0  3]
#  [ 0  4]
#  [ 0  5]
#  [ 0  6]
#  [ 0  7]
#  [ 0  8]
#  [ 0  9]
#  [ 1 -9]
#  [ 1 -8]
#  [ 1 -7]
#  [ 1 -6]
#  [ 1 -5]
#  [ 1 -4]
#  [ 1 -3]
#  [ 1 -2]
#  [ 1 -1]
#  [ 1  0]
#  [ 1  1]
#  [ 1  2]
#  [ 1  3]
#  [ 1  4]
#  [ 1  5]
#  [ 1  6]
#  [ 1  7]
#  [ 1  8]
#  [ 1  9]
#  [ 2 -9]
#  [ 2 -8]
#  [ 2 -7]
#  [ 2 -6]
#  [ 2 -5]
#  [ 2 -4]
#  [ 2 -3]
#  [ 2 -2]
#  [ 2 -1]
#  [ 2  0]
#  [ 2  1]
#  [ 2  2]
#  [ 2  3]
#  [ 2  4]
#  [ 2  5]
#  [ 2  6]
#  [ 2  7]
#  [ 2  8]
#  [ 2  9]
#  [ 3 -9]
#  [ 3 -8]
#  [ 3 -7]
#  [ 3 -6]
#  [ 3 -5]
#  [ 3 -4]
#  [ 3 -3]
#  [ 3 -2]
#  [ 3 -1]
#  [ 3  0]
#  [ 3  1]
#  [ 3  2]
#  [ 3  3]
#  [ 3  4]
#  [ 3  5]
#  [ 3  6]
#  [ 3  7]
#  [ 3  8]
#  [ 3  9]
#  [ 4 -8]
#  [ 4 -7]
#  [ 4 -6]
#  [ 4 -5]
#  [ 4 -4]
#  [ 4 -3]
#  [ 4 -2]
#  [ 4 -1]
#  [ 4  0]
#  [ 4  1]
#  [ 4  2]
#  [ 4  3]
#  [ 4  4]
#  [ 4  5]
#  [ 4  6]
#  [ 4  7]
#  [ 4  8]
#  [ 5 -8]
#  [ 5 -7]
#  [ 5 -6]
#  [ 5 -5]
#  [ 5 -4]
#  [ 5 -3]
#  [ 5 -2]
#  [ 5 -1]
#  [ 5  0]
#  [ 5  1]
#  [ 5  2]
#  [ 5  3]
#  [ 5  4]
#  [ 5  5]
#  [ 5  6]
#  [ 5  7]
#  [ 5  8]
#  [ 6 -7]
#  [ 6 -6]
#  [ 6 -5]
#  [ 6 -4]
#  [ 6 -3]
#  [ 6 -2]
#  [ 6 -1]
#  [ 6  0]
#  [ 6  1]
#  [ 6  2]
#  [ 6  3]
#  [ 6  4]
#  [ 6  5]
#  [ 6  6]
#  [ 6  7]
#  [ 7 -6]
#  [ 7 -5]
#  [ 7 -4]
#  [ 7 -3]
#  [ 7 -2]
#  [ 7 -1]
#  [ 7  0]
#  [ 7  1]
#  [ 7  2]
#  [ 7  3]
#  [ 7  4]
#  [ 7  5]
#  [ 7  6]
#  [ 8 -5]
#  [ 8 -4]
#  [ 8 -3]
#  [ 8 -2]
#  [ 8 -1]
#  [ 8  0]
#  [ 8  1]
#  [ 8  2]
#  [ 8  3]
#  [ 8  4]
#  [ 8  5]
#  [ 9 -3]
#  [ 9 -2]
#  [ 9 -1]
#  [ 9  0]
#  [ 9  1]
#  [ 9  2]
#  [ 9  3]]

# [[-0.012 -0.036]
#  [-0.008 -0.036]
#  [-0.004 -0.036]
#  [ 0.    -0.036]
#  [ 0.004 -0.036]
#  [ 0.008 -0.036]
#  [ 0.012 -0.036]
#  [-0.02  -0.032]
#  [-0.016 -0.032]
#  [-0.012 -0.032]
#  [-0.008 -0.032]
#  [-0.004 -0.032]
#  [ 0.    -0.032]
#  [ 0.004 -0.032]
#  [ 0.008 -0.032]
#  [ 0.012 -0.032]
#  [ 0.016 -0.032]
#  [ 0.02  -0.032]
#  [-0.024 -0.028]
#  [-0.02  -0.028]
#  [-0.016 -0.028]
#  [-0.012 -0.028]
#  [-0.008 -0.028]
#  [-0.004 -0.028]
#  [ 0.    -0.028]
#  [ 0.004 -0.028]
#  [ 0.008 -0.028]
#  [ 0.012 -0.028]
#  [ 0.016 -0.028]
#  [ 0.02  -0.028]
#  [ 0.024 -0.028]
#  [-0.028 -0.024]
#  [-0.024 -0.024]
#  [-0.02  -0.024]
#  [-0.016 -0.024]
#  [-0.012 -0.024]
#  [-0.008 -0.024]
#  [-0.004 -0.024]
#  [ 0.    -0.024]
#  [ 0.004 -0.024]
#  [ 0.008 -0.024]
#  [ 0.012 -0.024]
#  [ 0.016 -0.024]
#  [ 0.02  -0.024]
#  [ 0.024 -0.024]
#  [ 0.028 -0.024]
#  [-0.032 -0.02 ]
#  [-0.028 -0.02 ]
#  [-0.024 -0.02 ]
#  [-0.02  -0.02 ]
#  [-0.016 -0.02 ]
#  [-0.012 -0.02 ]
#  [-0.008 -0.02 ]
#  [-0.004 -0.02 ]
#  [ 0.    -0.02 ]
#  [ 0.004 -0.02 ]
#  [ 0.008 -0.02 ]
#  [ 0.012 -0.02 ]
#  [ 0.016 -0.02 ]
#  [ 0.02  -0.02 ]
#  [ 0.024 -0.02 ]
#  [ 0.028 -0.02 ]
#  [ 0.032 -0.02 ]
#  [-0.032 -0.016]
#  [-0.028 -0.016]
#  [-0.024 -0.016]
#  [-0.02  -0.016]
#  [-0.016 -0.016]
#  [-0.012 -0.016]
#  [-0.008 -0.016]
#  [-0.004 -0.016]
#  [ 0.    -0.016]
#  [ 0.004 -0.016]
#  [ 0.008 -0.016]
#  [ 0.012 -0.016]
#  [ 0.016 -0.016]
#  [ 0.02  -0.016]
#  [ 0.024 -0.016]
#  [ 0.028 -0.016]
#  [ 0.032 -0.016]
#  [-0.036 -0.012]
#  [-0.032 -0.012]
#  [-0.028 -0.012]
#  [-0.024 -0.012]
#  [-0.02  -0.012]
#  [-0.016 -0.012]
#  [-0.012 -0.012]
#  [-0.008 -0.012]
#  [-0.004 -0.012]
#  [ 0.    -0.012]
#  [ 0.004 -0.012]
#  [ 0.008 -0.012]
#  [ 0.012 -0.012]
#  [ 0.016 -0.012]
#  [ 0.02  -0.012]
#  [ 0.024 -0.012]
#  [ 0.028 -0.012]
#  [ 0.032 -0.012]
#  [ 0.036 -0.012]
#  [-0.036 -0.008]
#  [-0.032 -0.008]
#  [-0.028 -0.008]
#  [-0.024 -0.008]
#  [-0.02  -0.008]
#  [-0.016 -0.008]
#  [-0.012 -0.008]
#  [-0.008 -0.008]
#  [-0.004 -0.008]
#  [ 0.    -0.008]
#  [ 0.004 -0.008]
#  [ 0.008 -0.008]
#  [ 0.012 -0.008]
#  [ 0.016 -0.008]
#  [ 0.02  -0.008]
#  [ 0.024 -0.008]
#  [ 0.028 -0.008]
#  [ 0.032 -0.008]
#  [ 0.036 -0.008]
#  [-0.036 -0.004]
#  [-0.032 -0.004]
#  [-0.028 -0.004]
#  [-0.024 -0.004]
#  [-0.02  -0.004]
#  [-0.016 -0.004]
#  [-0.012 -0.004]
#  [-0.008 -0.004]
#  [-0.004 -0.004]
#  [ 0.    -0.004]
#  [ 0.004 -0.004]
#  [ 0.008 -0.004]
#  [ 0.012 -0.004]
#  [ 0.016 -0.004]
#  [ 0.02  -0.004]
#  [ 0.024 -0.004]
#  [ 0.028 -0.004]
#  [ 0.032 -0.004]
#  [ 0.036 -0.004]
#  [-0.036  0.   ]
#  [-0.032  0.   ]
#  [-0.028  0.   ]
#  [-0.024  0.   ]
#  [-0.02   0.   ]
#  [-0.016  0.   ]
#  [-0.012  0.   ]
#  [-0.008  0.   ]
#  [-0.004  0.   ]
#  [ 0.     0.   ]
#  [ 0.004  0.   ]
#  [ 0.008  0.   ]
#  [ 0.012  0.   ]
#  [ 0.016  0.   ]
#  [ 0.02   0.   ]
#  [ 0.024  0.   ]
#  [ 0.028  0.   ]
#  [ 0.032  0.   ]
#  [ 0.036  0.   ]
#  [-0.036  0.004]
#  [-0.032  0.004]
#  [-0.028  0.004]
#  [-0.024  0.004]
#  [-0.02   0.004]
#  [-0.016  0.004]
#  [-0.012  0.004]
#  [-0.008  0.004]
#  [-0.004  0.004]
#  [ 0.     0.004]
#  [ 0.004  0.004]
#  [ 0.008  0.004]
#  [ 0.012  0.004]
#  [ 0.016  0.004]
#  [ 0.02   0.004]
#  [ 0.024  0.004]
#  [ 0.028  0.004]
#  [ 0.032  0.004]
#  [ 0.036  0.004]
#  [-0.036  0.008]
#  [-0.032  0.008]
#  [-0.028  0.008]
#  [-0.024  0.008]
#  [-0.02   0.008]
#  [-0.016  0.008]
#  [-0.012  0.008]
#  [-0.008  0.008]
#  [-0.004  0.008]
#  [ 0.     0.008]
#  [ 0.004  0.008]
#  [ 0.008  0.008]
#  [ 0.012  0.008]
#  [ 0.016  0.008]
#  [ 0.02   0.008]
#  [ 0.024  0.008]
#  [ 0.028  0.008]
#  [ 0.032  0.008]
#  [ 0.036  0.008]
#  [-0.036  0.012]
#  [-0.032  0.012]
#  [-0.028  0.012]
#  [-0.024  0.012]
#  [-0.02   0.012]
#  [-0.016  0.012]
#  [-0.012  0.012]
#  [-0.008  0.012]
#  [-0.004  0.012]
#  [ 0.     0.012]
#  [ 0.004  0.012]
#  [ 0.008  0.012]
#  [ 0.012  0.012]
#  [ 0.016  0.012]
#  [ 0.02   0.012]
#  [ 0.024  0.012]
#  [ 0.028  0.012]
#  [ 0.032  0.012]
#  [ 0.036  0.012]
#  [-0.032  0.016]
#  [-0.028  0.016]
#  [-0.024  0.016]
#  [-0.02   0.016]
#  [-0.016  0.016]
#  [-0.012  0.016]
#  [-0.008  0.016]
#  [-0.004  0.016]
#  [ 0.     0.016]
#  [ 0.004  0.016]
#  [ 0.008  0.016]
#  [ 0.012  0.016]
#  [ 0.016  0.016]
#  [ 0.02   0.016]
#  [ 0.024  0.016]
#  [ 0.028  0.016]
#  [ 0.032  0.016]
#  [-0.032  0.02 ]
#  [-0.028  0.02 ]
#  [-0.024  0.02 ]
#  [-0.02   0.02 ]
#  [-0.016  0.02 ]
#  [-0.012  0.02 ]
#  [-0.008  0.02 ]
#  [-0.004  0.02 ]
#  [ 0.     0.02 ]
#  [ 0.004  0.02 ]
#  [ 0.008  0.02 ]
#  [ 0.012  0.02 ]
#  [ 0.016  0.02 ]
#  [ 0.02   0.02 ]
#  [ 0.024  0.02 ]
#  [ 0.028  0.02 ]
#  [ 0.032  0.02 ]
#  [-0.028  0.024]
#  [-0.024  0.024]
#  [-0.02   0.024]
#  [-0.016  0.024]
#  [-0.012  0.024]
#  [-0.008  0.024]
#  [-0.004  0.024]
#  [ 0.     0.024]
#  [ 0.004  0.024]
#  [ 0.008  0.024]
#  [ 0.012  0.024]
#  [ 0.016  0.024]
#  [ 0.02   0.024]
#  [ 0.024  0.024]
#  [ 0.028  0.024]
#  [-0.024  0.028]
#  [-0.02   0.028]
#  [-0.016  0.028]
#  [-0.012  0.028]
#  [-0.008  0.028]
#  [-0.004  0.028]
#  [ 0.     0.028]
#  [ 0.004  0.028]
#  [ 0.008  0.028]
#  [ 0.012  0.028]
#  [ 0.016  0.028]
#  [ 0.02   0.028]
#  [ 0.024  0.028]
#  [-0.02   0.032]
#  [-0.016  0.032]
#  [-0.012  0.032]
#  [-0.008  0.032]
#  [-0.004  0.032]
#  [ 0.     0.032]
#  [ 0.004  0.032]
#  [ 0.008  0.032]
#  [ 0.012  0.032]
#  [ 0.016  0.032]
#  [ 0.02   0.032]
#  [-0.012  0.036]
#  [-0.008  0.036]
#  [-0.004  0.036]
#  [ 0.     0.036]
#  [ 0.004  0.036]
#  [ 0.008  0.036]
#  [ 0.012  0.036]]

wavelength = np.array(629.2e-9, dtype=np.float64)
dxd = np.array(6.5e-6, dtype=np.float64)
zled = np.array(67.5e-3, dtype=np.float64)
magnification = np.array(8.1485, dtype=np.float64)
NA = np.array(0.1, dtype=np.float64)  # Optional field

# Load images into the ptychogram array
for i, img_file in enumerate(image_files):
    img_path = os.path.join(extract_path, img_file)
    img = cv2.imread(img_path, cv2.IMREAD_GRAYSCALE)
    # Pad the image
    # img = cv2.copyMakeBorder(img, 200, 200, 0, 0, cv2.BORDER_CONSTANT, value=0)
    # crop 200 of top and bottom
    img = img[200:-200, :]
    # Resize the image
    img = cv2.resize(img, (X, Y))
    if img is not None:
        ptychogram[i] = img
    else:
        print(f"Warning: Unable to load image {img_file}")

# Create HDF5 file and write data
with h5py.File(hdf5_file_path, 'w') as h5f:
    # Write required datasets
    for key, value in {
        'ptychogram': ptychogram,
        'wavelength': wavelength,
        'encoder': encoder,
        'dxd': dxd,
        'zled': zled,
        'magnification': magnification,
        'NA': NA
    }.items():
        dataset = h5f.create_dataset(key, data=value)
        
        # Set attributes
        dataset.attrs['CLASS'] = b'ARRAY'
        dataset.attrs['FLAVOR'] = b'numpy'
        dataset.attrs['TITLE'] = b'Empty(dtype=dtype(\'S1\'))'
        dataset.attrs['VERSION'] = b'2.4'
        
        # Set the shape attribute
        dataset.attrs['Shape'] = value.shape
        dataset.attrs['Type'] = value.dtype.name

print(f'HDF5 file created at: {hdf5_file_path}')